# Generated by Django 5.2 on 2025-05-05 14:13
from __future__ import annotations

import uuid

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
	initial = True

	dependencies = []  # type: ignore[var-annotated]

	operations = [
		migrations.CreateModel(
			name="StravaUser",
			fields=[
				(
					"strava_id",
					models.BigIntegerField(
						help_text="Strava Athlete ID",
						primary_key=True,
						serialize=False,
						unique=True,
					),
				),
				(
					"_access_token",
					models.TextField(
						blank=True, default="", help_text="Encrypted Strava access token"
					),
				),
				(
					"_refresh_token",
					models.TextField(
						blank=True, default="", help_text="Encrypted Strava refresh token"
					),
				),
				(
					"token_expires_at",
					models.DateTimeField(
						blank=True, default=None, help_text="Expiry timestamp for the access token"
					),
				),
				(
					"scope",
					models.CharField(
						blank=True,
						default="",
						help_text="Permissions scope granted by user",
						max_length=255,
					),
				),
				("last_login", models.DateTimeField(default=django.utils.timezone.now)),
				("created_at", models.DateTimeField(auto_now_add=True)),
				("updated_at", models.DateTimeField(auto_now=True)),
			],
		),
		migrations.CreateModel(
			name="CustomZonesConfig",
			fields=[
				(
					"id",
					models.UUIDField(
						default=uuid.uuid4, editable=False, primary_key=True, serialize=False
					),
				),
				(
					"activity_type",
					models.CharField(
						choices=[("DEFAULT", "Default"), ("RUN", "Run"), ("RIDE", "Ride")],
						default="DEFAULT",
						max_length=20,
					),
				),
				("created_at", models.DateTimeField(auto_now_add=True)),
				("updated_at", models.DateTimeField(auto_now=True)),
				(
					"user",
					models.ForeignKey(
						on_delete=django.db.models.deletion.CASCADE,
						related_name="zone_configs",
						to="api.stravauser",
					),
				),
			],
			options={
				"unique_together": {("user", "activity_type")},
			},
		),
		migrations.CreateModel(
			name="HeartRateZone",
			fields=[
				(
					"id",
					models.UUIDField(
						default=uuid.uuid4, editable=False, primary_key=True, serialize=False
					),
				),
				("name", models.CharField(help_text="e.g., 'Zone 1', 'Recovery'", max_length=50)),
				(
					"min_hr",
					models.PositiveIntegerField(
						help_text="Minimum heart rate for this zone (inclusive)"
					),
				),
				(
					"max_hr",
					models.PositiveIntegerField(
						help_text="Maximum heart rate for this zone (inclusive)"
					),
				),
				(
					"order",
					models.PositiveSmallIntegerField(
						default=0, help_text="Order of the zone (e.g., 1, 2, 3...)"
					),
				),
				("created_at", models.DateTimeField(auto_now_add=True)),
				("updated_at", models.DateTimeField(auto_now=True)),
				(
					"config",
					models.ForeignKey(
						on_delete=django.db.models.deletion.CASCADE,
						related_name="zones_definition",
						to="api.customzonesconfig",
					),
				),
			],
			options={
				"ordering": ["config", "order", "min_hr"],
				"unique_together": {("config", "name")},
			},
		),
		migrations.CreateModel(
			name="ZoneSummary",
			fields=[
				(
					"id",
					models.UUIDField(
						default=uuid.uuid4, editable=False, primary_key=True, serialize=False
					),
				),
				(
					"period_type",
					models.CharField(
						choices=[("WEEKLY", "Weekly"), ("MONTHLY", "Monthly")], max_length=10
					),
				),
				("year", models.PositiveIntegerField()),
				(
					"period_index",
					models.PositiveIntegerField(help_text="Month (1-12) or Week (1-53)"),
				),
				(
					"zone_times_seconds",
					models.JSONField(
						default=dict,
						help_text="JSON containing aggregated time in seconds for each zone name.",
					),
				),
				("updated_at", models.DateTimeField(auto_now=True)),
				(
					"user",
					models.ForeignKey(
						on_delete=django.db.models.deletion.CASCADE,
						related_name="zone_summaries",
						to="api.stravauser",
					),
				),
			],
			options={
				"indexes": [
					models.Index(
						fields=["user", "period_type", "year", "period_index"],
						name="api_zonesum_user_id_faa290_idx",
					)
				],
				"unique_together": {("user", "period_type", "year", "period_index")},
			},
		),
	]
